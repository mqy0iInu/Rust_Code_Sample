// 【データ型】
// 整数型: i8, u8, i16, u16, i32, u32, i64, u64, isize, usize
// 浮動小数点型: f32, f64
// ブーリアン型: bool
// 文字列型: char
// タプル（複合）型: (500, 6.4, true)
// 配列型: [1,2,3,4,5], [3;5] = [3,3,3,3,3]
//
// 【リテラル】
// 98_222 (10進数)
// 0xff (16進数)
// 0o77 (8進数)
// 0b1111_0000 (2進数)
// b'A' (バイト)
// 0. (浮動小数点数)

// ★【Rustの特徴】
// ★　Rustは変数はデフォルトでイミュータブル（不変）
// ★　値の所有者は1つの変数しか持てない（ビルドの時点でエラーを出す）
// ★　Rustではコンパイル時に関数の呼び出しでバローチェック（借用確認）をする
fn main()
{
    // 整数型
    let _i_val:u16 = 123;        // イミュータブル(不変)
    let mut m_val:u16 = 123;     // ミュータブル(可変)

    // 浮動小数点型
    let _i_fval: f64 = 3.141592;     // イミュータブル(不変)
    let mut m_fval: f64 = 3.141592;  // ミュータブル(可変)

    // 配列
    // let buf = [1, 2, 3, 4, 5];

    // 不変参照
    // ※このは & Cの変数アドレスではなく、不変参照（参照元がイミュータブル）！
    let val2 = &_i_val;
    let fval2 = &_i_fval;

    // 可変参照
    // ※このは &mut は可変参照（参照元がミュータブル）！
    let val3 = &mut m_val;
    let fval3 = &mut m_fval;

    // 参照外し
    *val3 = 321;
    *fval3 = 1.2345;

    // println!("{}", m_val); // バローチェックでコンパイルエラー（値が他の変数に渡っているから）
    println!("{}", val2);
    println!("{}", val3);

    // println!("{}", m_fval); // バローチェックでコンパイルエラー（値が他の変数に渡っているから）
    println!("{}", fval2);
    println!("{}", fval3);
}
